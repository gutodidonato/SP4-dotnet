RM:99433 Luis Augusto de Petta Didonato
RM:98361 Gabriell Hernandes Dassi
RM:99520 Luigi Exposito Uchiyama
RM:551409 Pedro Antunes Ferreira
RM:99726 
Detalhes sobre os Testes Implementados
=====================================

Os testes no projeto estão organizados dentro da pasta Janos.Tests e utilizam o framework de testes xUnit. Abaixo estão alguns pontos importantes sobre os testes implementados:

Estrutura dos Testes:

Cada controller tem sua própria classe de testes. Por exemplo, EnderecoControllerTests contém todos os testes relacionados ao EnderecoController.

Os testes seguem uma convenção de nomenclatura clara, facilitando a identificação do que cada teste verifica.
Tipos de Testes:

Testes de Unidade: Cada teste se concentra em uma única unidade de código, geralmente um método de um controller, garantindo que ele se comporte conforme o esperado.

Cenários de Testes: Os testes incluem cenários tanto de sucesso quanto de falha. Por exemplo, um teste que verifica se a chamada para obter um endereço existente retorna o objeto correto, e outro que verifica se a chamada para um endereço inexistente retorna um erro 404.
Assertivas:

O uso de assertivas, como Assert.IsType<>(), garante que o tipo de resultado retornado é o esperado.

A verificação dos resultados das operações CRUD é feita para assegurar que a lógica do controller está funcionando corretamente.


Práticas de Clean Code Aplicadas
=====================================

Nomenclatura Significativa:

Classes, métodos e variáveis têm nomes que refletem suas responsabilidades, tornando o código mais legível e compreensível.

Funções Pequenas e Focadas:

Métodos são mantidos pequenos e realizam apenas uma tarefa. Isso facilita a leitura e a manutenção do código.

Eliminação de Código Morto:

Código não utilizado é removido, ajudando a manter o código limpo e sem confusões.

Comentário Necessário:

Comentários são usados apenas onde a intenção do código não é imediatamente clara. Isso evita comentários excessivos que podem se tornar desatualizados.

Organização e Estrutura:

O código é organizado em classes e namespaces de forma lógica, facilitando a navegação e a compreensão do projeto como um todo.


Princípios SOLID Utilizados
=====================================

Single Responsibility Principle (SRP):

Cada classe tem uma única responsabilidade. Por exemplo, EnderecoController é responsável apenas por gerenciar as operações relacionadas a endereços, enquanto outras classes lidam com outras entidades.

Open/Closed Principle (OCP):

As classes são projetadas para serem extensíveis sem modificar o código existente. Isso é alcançado através do uso de interfaces e abstrações, permitindo adicionar novas funcionalidades sem alterar as classes existentes.

Liskov Substitution Principle (LSP):

O código é estruturado de forma que as subclasses possam ser usadas no lugar de suas superclasses sem alterar o comportamento esperado. Isso é assegurado através do uso de interfaces e classes abstratas.

Interface Segregation Principle (ISP):

Interfaces são mantidas pequenas e específicas. Isso evita que os consumidores de uma interface sejam forçados a depender de métodos que não utilizam. Assim, cada controller possui interfaces separadas para suas operações.

Dependency Inversion Principle (DIP):

A dependência é invertida para que módulos de alto nível (como controllers) não dependam diretamente de módulos de baixo nível (como implementações concretas de repositórios). Em vez disso, ambos dependem de abstrações (interfaces). Isso facilita a manutenção e os testes do código, permitindo a injeção de dependências.


Conclusão
=====================================

Essas práticas de testes, Clean Code e princípios SOLID contribuem significativamente para a qualidade do código do projeto Janos Enterprise. Elas não apenas melhoram a legibilidade e a manutenibilidade do código, mas também garantem que a aplicação seja robusta e fácil de expandir no futuro. A adoção dessas práticas é crucial para o desenvolvimento de software sustentável e eficiente.